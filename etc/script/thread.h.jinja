/**
 * thread.h
 *
 * Licensed under the MIT License <http://opensource.org/licenses/MIT>.
 * Copyright (c) 2023 BLET MickaÃ«l.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _BLET_THREAD_H_
#define _BLET_THREAD_H_

#include <pthread.h>
#include <exception>

namespace blet {

class Thread {
  private:
    pthread_t _id;
    bool _isDetached;
    pthread_attr_t* _attr;

  public:
    class Exception : public std::exception {
      public:
        Exception(const pthread_t& id, const char* message) :
            std::exception(),
            _what(message),
            _id(id) {
        }
        virtual ~Exception() throw() {
        }
        const char* what() const throw() {
            return _what;
        }

      protected:
        const char* _what;
        pthread_t _id;
    };

    Thread() :
        _id(0),
        _isDetached(false),
        _attr(NULL) {
    }

    virtual ~Thread() throw() {
        if (_id != 0 && !_isDetached) {
            throw Exception(_id, "Thread is not joining");
        }
    }

    void join() {
        if (_id == 0 || _isDetached) {
            throw Exception(_id, "Thread is not joinable");
        }
        pthread_join(_id, NULL);
        _id = 0;
    }

    bool joinable() const {
        return _id != 0 && !_isDetached;
    }

    void cancel() {
        if (_id == 0 || _isDetached) {
            throw Exception(_id, "Thread is not cancelable");
        }

        int result = pthread_cancel(_id);
        if (result != 0) {
            throw Exception(_id, "Failed to cancel thread");
        }
    }

    void detach() {
        if (_id == 0 || _isDetached) {
            throw Exception(_id, "Thread is not detachable");
        }

        int result = pthread_detach(_id);
        if (result != 0) {
            throw Exception(_id, "Failed to detach thread");
        }
        _isDetached = true;
    }

    const pthread_t& get_id() const {
        return _id;
    }

    const pthread_t& native_handle() const {
        return _id;
    }

    void set_attr(pthread_attr_t* attr) {
        _attr = attr;
    }

    // -------------------------------------------------------------------------
    // This following part is generate with ./etc/script/generate.py {{nb_args}}
    // -------------------------------------------------------------------------

{% for type in ['Static', 'Method', 'MethodConst'] %}
{% for i in range(1, nb_args + 2) -%}

  public:
{% if i > 1 or type == 'Method' or type == 'MethodConst' %}
    template<{% if type == 'Method' or type == 'MethodConst' %}typename Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}typename A{{i}}{% endfor %}>
{% endif %}
    Thread(void ({% if type == 'Method' or type == 'MethodConst' %}Class::{% endif %}*pFunction)({% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}){% if type == 'MethodConst' %} const{% endif %}{% if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}{% if type == 'Method' or type == 'MethodConst' %}{% if type == 'MethodConst' %}const {% endif %}Class* pObject{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}} a{{i}}{% endfor %}) :
        _id(0),
        _isDetached(false),
        _attr(NULL) {
        start(pFunction{% if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}{% if type == 'Method' or type == 'MethodConst' %}pObject{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}a{{i}}{% endfor %});
    }

{% if i > 1 or type == 'Method' or type == 'MethodConst' %}
    template<{% if type == 'Method' or type == 'MethodConst' %}typename Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}typename A{{i}}{% endfor %}>
{% endif %}
    void start(void ({% if type == 'Method' or type == 'MethodConst' %}Class::{% endif %}*pFunction)({% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}){% if type == 'MethodConst' %} const{% endif %}{% if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}{% if type == 'Method' or type == 'MethodConst' %}{% if type == 'MethodConst' %}const {% endif %}Class* pObject{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}} a{{i}}{% endfor %}) {
        if (_id != 0) {
            throw Exception(_id, "Thread already started");
        }
        ThreadData{{type}}{{i - 1}}
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        <{% if type == 'Method' or type == 'MethodConst' %}Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}>
{%- endif -%}
        * pThreadData = new ThreadData{{type}}{{i - 1}}
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        <{% if type == 'Method' or type == 'MethodConst' %}Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}>
{%- endif -%}
        (pFunction{% if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}{% if type == 'Method' or type == 'MethodConst' %}pObject{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}a{{i}}{% endfor %});
        int result = pthread_create(&_id, _attr, &startThread{{type}}{{i - 1}}
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
    <{% if type == 'Method' or type == 'MethodConst' %}Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}>
{%- endif -%}
        , pThreadData);
        if (result != 0) {
            delete pThreadData;
            throw Exception(_id, "Failed to create thread");
        }
    }

  private:
{% if i > 1 or type == 'Method' or type == 'MethodConst' %}
    template<{% if type == 'Method' or type == 'MethodConst' %}typename Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}typename A{{i}}{% endfor %}>
{% endif %}
    struct ThreadData{{type}}{{i - 1}} {
        ThreadData{{type}}{{i - 1}}(void ({% if type == 'Method' or type == 'MethodConst' %}Class::{% endif %}*pFunction)({% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}){% if type == 'MethodConst' %} const{% endif %}{% if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}{% if type == 'Method' or type == 'MethodConst' %}{% if type == 'MethodConst' %}const {% endif %}Class* pObject{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}} a{{i}}{% endfor %}) :
            _pFunction(pFunction)
            {%- if i > 1 or type == 'Method' or type == 'MethodConst' %}, {% endif %}
            {%- if type == 'Method' or type == 'MethodConst' %}_pObject(pObject){% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}_a{{i}}(a{{i}}){% endfor %}
 {}
        void call() {
            ({% if type == 'Method' or type == 'MethodConst' %}_pObject->{% endif %}*_pFunction)({% for i in range(1, i) %}{% if i > 1 %}, {% endif %}_a{{i}}{% endfor %});
        }
        void ({% if type == 'Method' or type == 'MethodConst' %}Class::{% endif %}*_pFunction)({% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}){% if type == 'MethodConst' %} const{% endif %};
        {% if type == 'Method' or type == 'MethodConst' %}{% if type == 'MethodConst' %}const {% endif %}Class* _pObject;{% endif %}
{% for i in range(1, i) %}
        A{{i}} _a{{i}};
{% endfor %}
    };

{% if i > 1 or type == 'Method' or type == 'MethodConst' %}
    template<{% if type == 'Method' or type == 'MethodConst' %}typename Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}typename A{{i}}{% endfor %}>
{% endif %}
    static void* startThread{{type}}{{i - 1}}(void* data) {
        ThreadData{{type}}{{i - 1}}
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        <{% if type == 'Method' or type == 'MethodConst' %}Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}>
{%- endif -%}* pThreadData = reinterpret_cast<ThreadData{{type}}{{i - 1}}
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        <{% if type == 'Method' or type == 'MethodConst' %}Class{% if i > 1 %}, {% endif %}{% endif %}{% for i in range(1, i) %}{% if i > 1 %}, {% endif %}A{{i}}{% endfor %}>
{%- endif -%}*>(data);
        pThreadData->call();
        delete pThreadData;
        return NULL;
    }

{% endfor %}
{% endfor %}
};

} // namespace blet

#endif // #ifndef _BLET_THREAD_H_