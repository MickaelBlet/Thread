/**
 * thread.h
 *
 * Licensed under the MIT License <http://opensource.org/licenses/MIT>.
 * Copyright (c) 2024 BLET MickaÃ«l.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// -------------------------------------------------------------------------
// Generated by ./etc/script/generate.py {{nb_args}}
// -------------------------------------------------------------------------

#ifndef BLET_THREAD_H_
#define BLET_THREAD_H_

#include <pthread.h>
#include <exception>

namespace blet {

class Thread {
  private:
    ::pthread_t id_;
    bool isDetached_;
    ::pthread_attr_t* attr_;

  public:
    class Exception : public std::exception {
      public:
        Exception(const pthread_t& id, const char* message) :
            std::exception(),
            what_(message),
            id_(id) {
        }
        virtual ~Exception() throw() {
        }
        const char* what() const throw() {
            return what_;
        }

      protected:
        const char* what_;
        ::pthread_t id_;
    };

    Thread() :
        id_(0),
        isDetached_(false),
        attr_(NULL) {
    }

    ~Thread() {
        if (id_ != 0 && !isDetached_) {
            ::pthread_join(id_, NULL);
        }
    }

    void join() {
        if (id_ == 0 || isDetached_) {
            throw Exception(id_, "Thread is not joinable");
        }
        ::pthread_join(id_, NULL);
        id_ = 0;
    }

    bool joinable() const {
        return id_ != 0 && !isDetached_;
    }

    void cancel() {
        if (id_ == 0 || isDetached_) {
            throw Exception(id_, "Thread is not cancelable");
        }

        int result = ::pthread_cancel(id_);
        if (result != 0) {
            throw Exception(id_, "Failed to cancel thread");
        }
    }

    void detach() {
        if (id_ == 0 || isDetached_) {
            throw Exception(id_, "Thread is not detachable");
        }

        int result = ::pthread_detach(id_);
        if (result != 0) {
            throw Exception(id_, "Failed to detach thread");
        }
        isDetached_ = true;
    }

    const pthread_t& get_id() const {
        return id_;
    }

    const pthread_t& native_handle() const {
        return id_;
    }

    void set_attr(pthread_attr_t* attr) {
        attr_ = attr;
    }

{% for type in ['Static', 'Method', 'MethodConst'] %}
{% for i in range(1, nb_args + 2) %}
{% set template_definition -%}
    {% if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        template<
        {%- if type == 'Method' or type == 'MethodConst' -%}
            typename Class
            {%- if i > 1 -%}
                , {# end space #}
            {%- endif -%}
        {%- endif -%}
        {%- for i in range(1, i) -%}
            {%- if i > 1 -%}
                , {# end space #}
            {%- endif -%}
            typename A{{i}}
        {%- endfor -%}
        >
    {%- endif %}
{%- endset %}
{% set args_type_definition -%}
    {%- for i in range(1, i) -%}
        {%- if i > 1 -%}
            , {# end space #}
        {%- endif -%}
        A{{i}}
    {%- endfor -%}
{%- endset %}
{% set types_definition -%}
    {%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        <
        {%- if type == 'Method' or type == 'MethodConst' -%}
            Class
            {%- if i > 1 -%}
                , {# end space #}
            {%- endif -%}
        {%- endif -%}
        {{ args_type_definition }}>
    {%- endif -%}
{%- endset %}
{% set args_parameter_definition -%}
    {%- if type == 'Method' or type == 'MethodConst' -%}
        {%- if type == 'MethodConst' -%}
            const {# end space #}
        {%- endif -%}
        Class* pObject
        {%- if i > 1 -%}
            , {# end space #}
        {%- endif -%}
    {%- endif -%}
    {%- for i in range(1, i) -%}
        {%- if i > 1 -%}
            , {# end space #}
        {%- endif -%}
        A{{i}} a{{i}}
    {%- endfor -%}
{%- endset %}
{% set args_parameter -%}
    pFunction
    {%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        , {# end space #}
    {%- endif -%}
    {%- if type == 'Method' or type == 'MethodConst' -%}
        pObject
        {%- if i > 1 -%}
            , {# end space #}
        {%- endif -%}
    {%- endif -%}
    {%- for i in range(1, i) -%}
        {%- if i > 1 -%}
            , {# end space #}
        {%- endif -%}
        a{{i}}
    {%- endfor -%}
{%- endset %}
{% set constructor_parameters -%}
    void (
    {%- if type == 'Method' or type == 'MethodConst' -%}
        Class::
    {%- endif -%}
    *pFunction)({{ args_type_definition }})
    {%- if type == 'MethodConst' -%}
       {# start space #} const
    {%- endif -%}
    {%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
        , {# end space #}
    {%- endif -%}
    {{ args_parameter_definition }}
{%- endset %}
{% set constructor_members -%}
            pFunction_(pFunction)
{%- if i > 1 or type == 'Method' or type == 'MethodConst' -%}
    ,
{% endif %}
{%- if type == 'Method' or type == 'MethodConst' %}
            pObject_(pObject)
{%- endif -%}
{%- if i > 1 and (type == 'Method' or type == 'MethodConst') -%}
    ,
{% endif %}
{% for i in range(1, i) -%}
    {%- if i > 1 -%}
        ,{{'\n'}}
    {%- endif %}
            a{{i}}_(a{{i}})
{%- endfor %}
{%- endset %}
  public:
{% if template_definition != '' %}
    {{ template_definition }}
{% endif %}
    Thread({{ constructor_parameters }}) :
        id_(0),
        isDetached_(false),
        attr_(NULL) {
        start({{ args_parameter }});
    }

{% if template_definition != '' %}
    {{ template_definition }}
{% endif %}
    void start({{ constructor_parameters }}) {
        if (id_ != 0) {
            throw Exception(id_, "Thread already started");
        }
        ThreadData{{type}}{{i - 1}}
{%- if types_definition != '' -%}
    {{ types_definition }}
{%- endif -%}
        * pThreadData = new ThreadData{{type}}{{i - 1}}
{%- if types_definition != '' -%}
    {{ types_definition }}
{%- endif -%}
        ({{ args_parameter }});
        int result = ::pthread_create(&id_, attr_, &startThread{{type}}{{i - 1}}
{%- if types_definition != '' -%}
    {{ types_definition }}
{%- endif -%}
        , pThreadData);
        if (result != 0) {
            delete pThreadData;
            throw Exception(id_, "Failed to create thread");
        }
    }

  private:
{% if template_definition != '' %}
    {{ template_definition }}
{% endif %}
    struct ThreadData{{type}}{{i - 1}} {
        ThreadData{{type}}{{i - 1}}({{ constructor_parameters }}) :
            {{ constructor_members }} {}
        void call() {
            (
{%- if type == 'Method' or type == 'MethodConst' -%}
    pObject_->
{%- endif -%}
            *pFunction_)(
{%- for i in range(1, i) -%}
    {%- if i > 1 -%}
        , {# end space #}
    {%- endif -%}
    a{{i}}_
{%- endfor %});
        }
        void (
{%- if type == 'Method' or type == 'MethodConst' -%}
    Class::
{%- endif -%}
        *pFunction_)(
{%- for i in range(1, i) -%}
    {%- if i > 1 -%}
        , {# end space #}
    {%- endif -%}
    A{{i}}
{%- endfor -%})
{%- if type == 'MethodConst' -%}
    {# start space #} const
{%- endif -%}
        ;
{% if type == 'Method' or type == 'MethodConst' %}
        {# end space #}
    {%- if type == 'MethodConst' -%}
        const {# end space #}
    {%- endif -%}
    Class* pObject_;
{% endif %}
{% for i in range(1, i) %}
        A{{i}} a{{i}}_;
{% endfor %}
    };

{% if template_definition != '' %}
    {{ template_definition }}
{% endif %}
    static void* startThread{{type}}{{i - 1}}(void* data) {
        ThreadData{{type}}{{i - 1}}
{%- if types_definition != '' -%}
    {{ types_definition }}
{%- endif -%}
        * pThreadData = reinterpret_cast<ThreadData{{type}}{{i - 1}}
{%- if types_definition != '' -%}
    {{ types_definition }}
{%- endif -%}
        *>(data);
        pThreadData->call();
        delete pThreadData;
        return NULL;
    }

{% endfor %}
{% endfor %}
};

} // namespace blet

#endif // #ifndef BLET_THREAD_H_
